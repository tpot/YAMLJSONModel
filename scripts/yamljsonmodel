#!/usr/bin/env python

import sys, yaml
from jinja2 import Environment, PackageLoader, select_autoescape

def map_variables(variables):
    
    mapped_variables = {}
    
    for key, value in variables.items():

        # Expand scalar value to a hash

        if type(value) == str:
            mapped_variables[key] = {"type": value}
        else:
            mapped_variables[key] = value
            
    return mapped_variables

def generate_template(kind, variables):
    """Generate a JSONModel header from YAML configuration."""

    env = Environment(
        loader = PackageLoader('yamljsonmodel', 'templates')
        )

    template = env.get_template('%s/model.h' % kind)

    mapped_variables = variables.copy()
    for key in ['properties', 'optional_properties']:
        mapped_variables[key] = map_variables(variables[key])

    print(template.render(**mapped_variables))

def process_file(filename): 
    """Process a YAML file through the template engine."""

    with open(filename, 'r') as stream:
        y = yaml.load(stream)
        for obj in y:
            pprint.pprint(obj)
            generate_template(obj['kind'], obj)

if __name__ == '__main__':            
    for filename in sys.argv[1:]:
        process_file(filename)
